import joblib
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import RobustScaler, LabelEncoder
from sklearn.feature_selection import SelectKBest, chi2
from sklearn.impute import SimpleImputer, KNNImputer
from sklearn.preprocessing import RobustScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import cross_validate
from sklearn.metrics import make_scorer, accuracy_score, f1_score, recall_score
from sklearn.ensemble import GradientBoostingClassifier

# Display ayarları
pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)
pd.set_option('display.max_colwidth', None)
pd.set_option('display.width', 1000)
pd.set_option('display.precision', 2)
pd.set_option('display.float_format', '{:.2f}'.format)

# Veri Yükleme
path = "/kaggle/input/playground-series-s4e1/test.csv"
train = pd.read_csv("/content/train.csv")
test = pd.read_csv("/content/test.csv")
sub = pd.read_csv("/content/sample_submission.csv")

train.drop(columns=["CustomerId", "Surname"], axis=1, inplace=True)


from sklearn.metrics import roc_auc_score, roc_curve
from sklearn.model_selection import train_test_split

def model_ml(dataframe, target, targetsize, randomstate):
    loaded_data = joblib.load('preprocess_bank.pkl')
    
    # X and y separation
    X = dataframe.drop(target, axis=1)
    y = dataframe[target]

    # Separate categorical and numerical columns
    categorical_c = X.select_dtypes(include="object").columns
    numerical_c = X.select_dtypes(include=["float64", "int64"]).columns

    print(f"Categorical Col: {categorical_c}")
    print(f"Numerical Col: {numerical_c}")

    # Pipelines for categorical and numerical data
    categorical_pipi = Pipeline([
        ('imputer', SimpleImputer(strategy='most_frequent')),
        ('encoder', OneHotEncoder(handle_unknown='ignore'))
    ])
    numerical_pipi = Pipeline([
        ('imputer', SimpleImputer(strategy='mean')),
        ('scaler', RobustScaler())
    ])

    # Column transformer to process the data
    process = ColumnTransformer([
        ('cat', categorical_pipi, categorical_c),
        ('num', numerical_pipi, numerical_c)
    ])

    # Split the data into train and test sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=targetsize, random_state=randomstate)

    # Create the pipeline
    pipeline = Pipeline([
        ('process', process),
        ('model', GradientBoostingClassifier())
    ])

    # Train the model
    pipeline.fit(X_train, y_train)

    # Save the trained pipeline
    joblib.dump(pipeline, 'model_pipeline.pkl')
    
    # Predict probabilities for the test set
    y_prob = pipeline.predict_proba(X_test)[:, 1]

    # Calculate the ROC AUC score
    roc_auc = roc_auc_score(y_test, y_prob)
    
    print(f"ROC AUC Score: {roc_auc:.4f}")

    # Plot the ROC curve
    fpr, tpr, _ = roc_curve(y_test, y_prob)
    plt.figure()
    plt.plot(fpr, tpr, label=f'ROC curve (area = {roc_auc:.4f})')
    plt.plot([0, 1], [0, 1], 'k--')
    plt.xlim([0.0, 1.0])
    plt.ylim([0.0, 1.05])
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')
    plt.title('Receiver Operating Characteristic')
    plt.legend(loc="lower right")
    plt.show()

model_ml(train, target='Exited', targetsize=0.25, randomstate=4) #### ROC AUC Score: 0.8901
